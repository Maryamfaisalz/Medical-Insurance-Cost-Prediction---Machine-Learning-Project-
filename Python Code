Importing the Dependencies

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics

Data Collection & Analysis

# loading the data from the csv file to the pandas DataFrame
insurance_data = pd.read_csv('/content/insurance.csv')

# first 5 rows of the DataFrame
insurance_data.head()

# number of rows and columns
insurance_data.shape

# getting information about the dataset
insurance_data.info()

Categorical Features:
- Sex
- Smoker
- Region

# checking for any missing values
insurance_data.isnull().sum()

Data Analysis

# Statistical Measures of the Dataset
insurance_data.describe()

#Distribution of age value
sns.set()
plt.figure(figsize=(6,6))
sns.distplot(insurance_data['age'])
plt.title('Age Distribution')
plt.show()

# Gender Distribution
plt.figure(figsize=(6, 6))
sns.countplot(x='sex', data=insurance_data, palette={'male': 'blue', 'female': 'pink'})
plt.title('Sex Distribution')
plt.show()

insurance_data['sex'].value_counts()

#BMI Distribution
plt.figure(figsize=(6,6))
sns.distplot(insurance_data['bmi'])
plt.title('BMI Distribution')
plt.show()

Normal BMI range --> 18.5 to 24.9

#Children Distribution
plt.figure(figsize=(6, 6))
sns.countplot(x='children', data=insurance_data)
plt.title('Children Distribution')
plt.show()

insurance_data['children'].value_counts()

# Smoker Distribution
plt.figure(figsize=(6, 6))
sns.countplot(x='smoker', data=insurance_data, palette={'yes': 'blue', 'no': 'orange'})
plt.title('Smoker Distribution')
plt.show()

insurance_data['smoker'].value_counts()

# Region Distribution
plt.figure(figsize=(6, 6))
sns.countplot(x='region', data=insurance_data)
plt.title('Region Distribution')
plt.show()

insurance_data['region'].value_counts()

# Charges Distribution
plt.figure(figsize=(6,6))
sns.distplot(insurance_data['charges'])
plt.title('Charges Distribution')
plt.show()

Data Pre-processing

Encoding the Categorical Features

# encoding 'sex' column
insurance_data.replace({'sex':{ 'male' : 0 , 'female' : 1 }}, inplace=True)

# encoding 'smoker' column
insurance_data.replace({'smoker':{ 'yes' : 0 , 'no' : 1 }}, inplace=True)

# encoding 'region' column
insurance_data.replace({'region':{ 'southeast' : 0 , 'southwest' : 1, 'northeast':2, 'northwest':3 }}, inplace=True)

insurance_data

Splitting the Features and Target 

X = insurance_data.drop(columns='charges', axis=1)
Y = insurance_data['charges']

print(X)

print(Y)

Splitting the data into Training data & Testing data

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,random_state=2)

print(X.shape , X_train.shape, X_test.shape)

Model Training 


Linear Regression

# loading the linear regression model 
regressor = LinearRegression()

regressor.fit(X_train,Y_train)

Model Evaluation

# prediction on training data 
training_data_prediction = regressor.predict(X_train)

# R squared value 
r2_train = metrics.r2_score(Y_train , training_data_prediction)
print('R squared value:', r2_train)

# prediction on training data 
testing_data_prediction = regressor.predict(X_test)

# R squared value 
r2_test = metrics.r2_score(Y_test , testing_data_prediction)
print('R squared value:', r2_test)

Building a Predictive System

input_data = (31,1,25.74,0,1,0)

#changing imput_data into a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the array 
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = regressor.predict(input_data_reshaped)
print('The insurance cost is USD:'  ,prediction[0])

